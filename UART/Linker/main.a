;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/25/2019
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;
;#define        DHT_DATA_IN    PINC.2
;#define        DHT_DATA_OUT    PORTC.2
;#define        DHT_DDR_DATA    DDRC.2
;#define DDROUT        1
;#define DDRIN        0
;#define DHT_ER      0
;#define DHT_OK      1
;#define DHT_Temp    0
;#define DHT_RH      1
;#define ADC_VREF_TYPE 0xE0
;
;typedef  signed          char int8_t;
;typedef  signed            int int16_t;
;typedef  signed long      int int32_t;
;
;/*    Kieu So Nguyen Khong Dau */
;typedef  unsigned        char uint8_t;
;typedef  unsigned            int  uint16_t;
;typedef  unsigned long    int  uint32_t;
;/*    Kieu So Thuc */
;typedef  float            float32_t;
;uint8_t nhiet=0;
;uint8_t am=0;
;
;uint8_t buffer[5]={0,0,0,0,0};
;
;uint8_t select = 0;
;//------------------------------------------------------//
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 16
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 006B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 006C char status,data;
; 0000 006D status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 006E data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 006F if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0070    {
; 0000 0071    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0072    if(data == 'z'){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0073        PORTC.0 = 0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0074      }
; 0000 0075      if(data == 'l'){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0076         PORTC.0 = 1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0077      }
; 0000 0078 #if RX_BUFFER_SIZE == 256
; 0000 0079    // special case for receiver buffer size=256
; 0000 007A    if (++rx_counter == 0)
; 0000 007B       {
; 0000 007C #else
; 0000 007D    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 007E    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 007F       {
; 0000 0080       rx_counter=0;
;PCODE: $00000031 VOL: 0
; 0000 0081 #endif
; 0000 0082       rx_buffer_overflow=1;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0083       }
; 0000 0084    }
;PCODE: $00000035 VOL: 0
; 0000 0085 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 008C {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 008D char data;
; 0000 008E while (rx_counter==0);
;PCODE: $0000003D VOL: 0
;	data -> R17
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 008F data=rx_buffer[rx_rd_index++];
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0090 #if RX_BUFFER_SIZE != 256
; 0000 0091 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0092 #endif
; 0000 0093 #asm("cli")
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
	cli
;PCODE: $0000004E VOL: 0
; 0000 0094 --rx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0095 #asm("sei")
;PCODE: $00000050 VOL: 0
	sei
;PCODE: $00000051 VOL: 0
; 0000 0096 return data;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0097 }
;PCODE: $00000055 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 16
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00A8 {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00A9 if (tx_counter)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00AA    {
; 0000 00AB    --tx_counter;
;PCODE: $0000005A VOL: 0
; 0000 00AC    UDR=tx_buffer[tx_rd_index++];
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00AD #if TX_BUFFER_SIZE != 256
; 0000 00AE    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00AF #endif
; 0000 00B0    }
;PCODE: $00000065 VOL: 0
; 0000 00B1 }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00B8 {
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00B9 while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00BA #asm("cli")
;PCODE: $00000072 VOL: 0
	cli
;PCODE: $00000073 VOL: 0
; 0000 00BB if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00BC    {
; 0000 00BD    tx_buffer[tx_wr_index++]=c;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00BE #if TX_BUFFER_SIZE != 256
; 0000 00BF    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C0 #endif
; 0000 00C1    ++tx_counter;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C2    }
; 0000 00C3 else
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00C4    UDR=c;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C5 #asm("sei")
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
	sei
;PCODE: $0000008D VOL: 0
; 0000 00C6 }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;//_-----------------------------------------------------//  Lay du lieu tu DHT11
;uint8_t DHT_GetTemHumi ()
; 0000 00CE {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00CF     uint8_t ii,i,checksum;
; 0000 00D0     DHT_DDR_DATA=DDROUT;  // set la cong ra
;PCODE: $00000093 VOL: 0
;	ii -> R17
;	i -> R16
;	checksum -> R19
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00D1     DHT_DATA_OUT=1;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00D2     delay_ms(50);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00D3     DHT_DATA_OUT=0;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D4     delay_ms(25); // it nhat 18ms
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00D5     DHT_DATA_OUT=1;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00D6     delay_us(10);
;PCODE: $000000A2 VOL: 0
; 0000 00D7     DHT_DDR_DATA=DDRIN;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00D8     delay_us(60);
;PCODE: $000000A5 VOL: 0
; 0000 00D9     if(DHT_DATA_IN)return DHT_ER ;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00DA     else while(!(DHT_DATA_IN));    //Doi DaTa len 1
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00DB     delay_us(60);
;PCODE: $000000B5 VOL: 0
; 0000 00DC     if(!DHT_DATA_IN)return DHT_ER;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00DD     else while((DHT_DATA_IN));    //Doi Data ve 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00DE     //Bat dau doc du lieu
; 0000 00DF     for(i=0;i<5;i++)
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00E0     {
; 0000 00E1         for(ii=0;ii<8;ii++)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00E2         {
; 0000 00E3         while((!DHT_DATA_IN));//Doi Data len 1
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00E4         delay_us(30);
;PCODE: $000000DD VOL: 0
; 0000 00E5         if(DHT_DATA_IN)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00E6             {
; 0000 00E7             buffer[i]|=(1<<(7-ii));
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00E8             while((DHT_DATA_IN));//Doi Data xuong 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00E9             }
; 0000 00EA         }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00EB     }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00EC     //Tinh toan check sum
; 0000 00ED     checksum=buffer[0]+buffer[1]+buffer[2]+buffer[3];
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00EE     //Kiem tra check sum
; 0000 00EF     DHT_DDR_DATA=DDROUT;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00F0     DHT_DATA_OUT=0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00F1     delay_ms(10);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00F2     if((checksum)!=buffer[4])return DHT_ER;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00F3     //Lay du lieu
; 0000 00F4     return(buffer[2]);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00F5     /*
; 0000 00F6       if (select==DHT_Temp)
; 0000 00F7       {    //Return the value has been choosen
; 0000 00F8             return(buffer[2]);
; 0000 00F9       }
; 0000 00FA       if(select==DHT_RH)
; 0000 00FB       {
; 0000 00FC             return(buffer[0]+buffer[2]);
; 0000 00FD       }
; 0000 00FE     return DHT_OK;  */
; 0000 00FF 
; 0000 0100 }
;PCODE: $00000121 VOL: 0
;
;//--------------------------------------------------------------//
;// Declare your global variables here
;//char c;
;void main(void)
; 0000 0106 {
;PCODE: $00000122 VOL: 0
; 0000 0107 // Declare your local variables here
; 0000 0108 // Input/Output Ports initialization
; 0000 0109 // Port B initialization
; 0000 010A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 010B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 010C PORTB=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 010D DDRB=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 010E 
; 0000 010F // Port C initialization
; 0000 0110 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0111 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0112 // all port C is output
; 0000 0113 PORTC=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0114 DDRC=0x11;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0115 
; 0000 0116 // Port D initialization
; 0000 0117 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0118 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0119 PORTD=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 011A DDRD=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 011B 
; 0000 011C // Timer/Counter 0 initialization
; 0000 011D // Clock source: System Clock
; 0000 011E // Clock value: Timer 0 Stopped
; 0000 011F TCCR0=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0120 TCNT0=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0121 
; 0000 0122 // Timer/Counter 1 initialization
; 0000 0123 // Clock source: System Clock
; 0000 0124 // Clock value: Timer1 Stopped
; 0000 0125 // Mode: Normal top=0xFFFF
; 0000 0126 // OC1A output: Discon.
; 0000 0127 // OC1B output: Discon.
; 0000 0128 // Noise Canceler: Off
; 0000 0129 // Input Capture on Falling Edge
; 0000 012A // Timer1 Overflow Interrupt: Off
; 0000 012B // Input Capture Interrupt: Off
; 0000 012C // Compare A Match Interrupt: Off
; 0000 012D // Compare B Match Interrupt: Off
; 0000 012E TCCR1A=0x00;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 012F TCCR1B=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0130 TCNT1H=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0131 TCNT1L=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0132 ICR1H=0x00;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0133 ICR1L=0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0134 OCR1AH=0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0135 OCR1AL=0x00;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0136 OCR1BH=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0137 OCR1BL=0x00;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0138 
; 0000 0139 // Timer/Counter 2 initialization
; 0000 013A // Clock source: System Clock
; 0000 013B // Clock value: Timer2 Stopped
; 0000 013C // Mode: Normal top=0xFF
; 0000 013D // OC2 output: Disconnected
; 0000 013E ASSR=0x00;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 013F TCCR2=0x00;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0140 TCNT2=0x00;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0141 OCR2=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0142 
; 0000 0143 // External Interrupt(s) initialization
; 0000 0144 // INT0: Off
; 0000 0145 // INT1: Off
; 0000 0146 MCUCR=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0147 
; 0000 0148 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0149 TIMSK=0x00;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 014A 
; 0000 014B // USART initialization
; 0000 014C // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 014D // USART Receiver: On
; 0000 014E // USART Transmitter: On
; 0000 014F // USART Mode: Asynchronous
; 0000 0150 // USART Baud Rate: 9600
; 0000 0151 
; 0000 0152 UCSRA=0x00;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0153 /* Enable receiver and transmitter */
; 0000 0154 UCSRB=0xD8;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0155 /* Set frame format: 8data, 1stop bit */
; 0000 0156 UCSRC=0x86;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0157 // baud rate 9600 => UBRR = 0x0033
; 0000 0158 UBRRH=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0159 UBRRL=0x33;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 015A 
; 0000 015B 
; 0000 015C 
; 0000 015D // Analog Comparator initialization
; 0000 015E // Analog Comparator: Off
; 0000 015F // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0160 ACSR=0x80;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0161 SFIOR=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0162 
; 0000 0163 // ADC initialization
; 0000 0164 // ADC disabled
; 0000 0165 ADCSRA=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0166 
; 0000 0167 // SPI initialization
; 0000 0168 // SPI disabled
; 0000 0169 SPCR=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 016A 
; 0000 016B // TWI initialization
; 0000 016C // TWI disabled
; 0000 016D TWCR=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 016E 
; 0000 016F // Global enable interrupts
; 0000 0170 #asm("sei")
;PCODE: $00000167 VOL: 0
	sei
;PCODE: $00000168 VOL: 0
; 0000 0171 
; 0000 0172     puts("AT\r\n");
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0173     delay_ms(100);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0174 
; 0000 0175     puts("AT+CWMODE=1\r\n");
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0176     delay_ms(100);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0177 
; 0000 0178     puts("AT+CWJAP=\"ttt\",\"12345678\"\r\n");
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0179     delay_ms(1000);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 017A     //c = 'a';
; 0000 017B while (1)
;PCODE: $0000017E VOL: 0
; 0000 017C       {
; 0000 017D       // Place your code here
; 0000 017E       /*
; 0000 017F        for(i='a';i<='z';i++){
; 0000 0180             putchar(i);
; 0000 0181 
; 0000 0182        }
; 0000 0183       putchar('\n');
; 0000 0184        delay_ms(500);
; 0000 0185        */
; 0000 0186       // c = getchar();
; 0000 0187       // putchar(c);
; 0000 0188       //delay_ms(200);
; 0000 0189 
; 0000 018A 
; 0000 018B       delay_ms(200);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 018C       //printf("nhiet do la %d\n",nhiet);
; 0000 018D       puts("AT+CIPSTART=\"TCP\",\"192.168.43.22\",8888\r\n");
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 018E       delay_ms(100);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 018F       puts("AT+CIPSEND=11\r\n");
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0190       delay_ms(200);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0191       //select = 1;
; 0000 0192       //am= DHT_GetDoam();
; 0000 0193       //delay_ms(2000);
; 0000 0194       //select = DHT_Temp;
; 0000 0195       //nhiet= DHT_GetTemHumi();
; 0000 0196       //am = buffer[0];
; 0000 0197       DHT_GetTemHumi();
;PCODE: $00000190 VOL: 0
; 0000 0198       printf("n+%d;%d\n\r",buffer[0],buffer[2]);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0199       /*
; 0000 019A       if(c == 'n'){
; 0000 019B       nhiet= DHT_GetTemHumi(DHT_Temp);
; 0000 019C       printf("n+%d\n\r",nhiet);
; 0000 019D       c = 'a';
; 0000 019E       }
; 0000 019F       else if(c == 'a'){
; 0000 01A0       //puts("1\r\n");
; 0000 01A1       nhiet= DHT_GetTemHumi(DHT_Temp);
; 0000 01A2       printf("a+%d\n\r",nhiet);
; 0000 01A3       c = 'n';
; 0000 01A4       }
; 0000 01A5       */
; 0000 01A6     //c = getchar();
; 0000 01A7     // putchar(c);
; 0000 01A8       delay_ms(500);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 01A9 
; 0000 01AA       }
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 01AB }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0

	.DSEG
_0x40:
	.BYTE 0x68
